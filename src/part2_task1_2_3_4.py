# -*- coding: utf-8 -*-
"""Part2_Task1_2_3_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QAglAuticek-p87CNmjKXAvjcSfyVNXc

#Part 2: Spark Dataframe API

##Task 1
"""

from google.colab import drive
drive.mount('/content/drive')

"""Pointing to an existing repo and creating a clone."""

!git clone https://julesmcg@github.com/databricks/LearningSparkV2.git

pip install pyspark

import pyspark
from pyspark.sql import SparkSession


spark = SparkSession.builder.appName("answers").getOrCreate()
!wget https://julesmcg@github.com/databricks/LearningSparkV2/tree/master/mlflow-project-example/data/sf-airbnb-clean.parquet/part-00000-tid-4320459746949313749-5c3d407c-c844-4016-97ad-2edec446aa62-6688-1-c000.snappy.parquet -O /tmp/sf-airbnb-clean.parquet
#creating a shortcut variabe for the path
sf_airbnb_clean_path = "/tmp/sf-airbnb-clean.parquet"

"""##Task 2"""

from pyspark import SparkContext
from pyspark import SparkConf
from pyspark import SQLContext
from pyspark.sql.types import *

#reading parquet file and loading into spark dataframe
airbnb_df = spark.read.parquet("/content/part-00000-tid-4320459746949313749-5c3d407c-c844-4016-97ad-2edec446aa62-6688-1-c000.snappy.parquet")
airbnb_df.show()

from pyspark.sql.functions import max,col,min,avg,split
min_price = airbnb_df.select(min("price"))
min_price = min_price.collect()[0][0]

min_price

max_price = airbnb_df.select(max("price"))
max_price = max_price.collect()[0][0]
max_price

row_count = airbnb_df.count()
row_count

columns = ["min_price", "max_price", "row_count"]
max_min_count_data = [(min_price, max_price, row_count)]
rdd = spark.sparkContext.parallelize(max_min_count_data)
max_min_count_df = rdd.toDF(columns)
max_min_count_df.show()

max_min_count_df.write.option("header",True) \
 .csv("/content/drive/MyDrive/out2_2.txt")

"""##Task 3

Calculating the average number of bathrooms and bedrooms across all the properties listed in this data set with a price of > 5000
and a review score being exactly equalt to 10
"""

airbnb_df.show()

airbnb_price_review_df = airbnb_df.where((airbnb_df.price>'5000') & (airbnb_df.review_scores_value=='10'))
airbnb_price_review_df.show()

airbnb_price_review_avg_bathrooms_df = airbnb_price_review_df.select(avg("bathrooms"))
airbnb_price_review_avg_bathrooms_df.show()

airbnb_price_review_avg_bedrooms_df = airbnb_price_review_df.select(avg("bedrooms"))
airbnb_price_review_avg_bedrooms_df.show()

import pandas as pd
pdf = pd.DataFrame(
    {
        "avg_bathrooms": [airbnb_price_review_avg_bathrooms_df.collect()[0]],
        "avg_bedrooms": [airbnb_price_review_avg_bedrooms_df.collect()[0]],
    }
)


avg_bathroom_bedroom_df = spark.createDataFrame(pdf)
avg_bathroom_bedroom_df.show()

avg_bathroom_bedroom_df = avg_bathroom_bedroom_df.withColumn('avg_bathrooms', col('avg_bathrooms').cast('string'))
avg_bathroom_bedroom_df = avg_bathroom_bedroom_df.withColumn('avg_bedrooms', col('avg_bedrooms').cast('string'))

avg_bathroom_bedroom_df.write.option("header",True) \
 .csv("/content/drive/MyDrive/out_2_3.txt")

"""##Task 4

Calculating how many people can be accomodated by the property with the lowest price and highest rating
"""

airbnb_df.show()

airbnb_lowest_price_highest_rating_df = airbnb_df.orderBy(airbnb_df.price.desc())
airbnb_lowest_price_highest_rating_df = airbnb_lowest_price_highest_rating_df.limit(1)
airbnb_lowest_price_highest_rating_df.show()

airbnb_lowest_price_highest_rating_accomm = airbnb_lowest_price_highest_rating_df.select(col("accommodates"))
airbnb_lowest_price_highest_rating_accomm.show()

accommodates_string= airbnb_lowest_price_highest_rating_accomm.withColumn('accommodates', col('accommodates').cast('string'))

accommodates_string.write.csv("/content/drive/MyDrive/out_2_4.txt")

